name: CD # Continuous Deployment

on:
  push:
    tags:
      - '[v]?[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate changelog
        id: changelog
        run: |
          # For manual dispatch, use provided version as reference
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            # Try to find the previous tag
            PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^${VERSION}$" | tail -1 2>/dev/null || echo "")
            if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$VERSION" ]; then
              PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            fi
          else
            # Get the previous tag for automatic releases
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          fi
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Manual release from commit $(git rev-parse --short HEAD)" >> changelog.md
              echo "" >> changelog.md
            fi
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "First release of Query Crafter!" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## Installation" >> changelog.md
          echo "" >> changelog.md
          echo "### Quick Install (Recommended)" >> changelog.md
          echo '```bash' >> changelog.md
          echo 'curl -sSfL https://raw.githubusercontent.com/JonnyWalker81/query-crafter/main/install.sh | sh' >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "### Manual Download" >> changelog.md
          echo "Download the appropriate archive for your platform from the assets below." >> changelog.md
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: changelog.md
          draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft == 'true' || false }}
          prerelease: false
          generate_release_notes: false

  publish:

    name: Publishing for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: create-release

    strategy:
      matrix:
        include:
          - os: macos-latest
            os-name: macos
            target: x86_64-apple-darwin
            architecture: x86_64
            binary-postfix: ""
            binary-name: query-crafter
            use-cross: false
          - os: macos-latest
            os-name: macos
            target: aarch64-apple-darwin
            architecture: arm64
            binary-postfix: ""
            use-cross: false
            binary-name: query-crafter
          - os: ubuntu-latest
            os-name: linux
            target: x86_64-unknown-linux-gnu
            architecture: x86_64
            binary-postfix: ""
            use-cross: false
            binary-name: query-crafter
          - os: windows-latest
            os-name: windows
            target: x86_64-pc-windows-msvc
            architecture: x86_64
            binary-postfix: ".exe"
            use-cross: false
            binary-name: query-crafter
          - os: ubuntu-latest
            os-name: linux
            target: aarch64-unknown-linux-gnu
            architecture: arm64
            binary-postfix: ""
            use-cross: true
            binary-name: query-crafter
          - os: ubuntu-latest
            os-name: linux
            target: i686-unknown-linux-gnu
            architecture: i686
            binary-postfix: ""
            use-cross: true
            binary-name: query-crafter

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

          target: ${{ matrix.target }}

          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

          use-cross: ${{ matrix.use-cross }}

          toolchain: stable

          args: --release --target ${{ matrix.target }}


      - name: install strip command
        shell: bash
        run: |

          if [[ ${{ matrix.target }} == aarch64-unknown-linux-gnu ]]; then

              sudo apt update
              sudo apt-get install -y binutils-aarch64-linux-gnu
          fi
      - name: Packaging final binary
        shell: bash
        run: |

          cd target/${{ matrix.target }}/release


          ####### reduce binary size by removing debug symbols #######

          BINARY_NAME=${{ matrix.binary-name }}${{ matrix.binary-postfix }}
          if [[ ${{ matrix.target }} == aarch64-unknown-linux-gnu ]]; then

            GCC_PREFIX="aarch64-linux-gnu-"
          else
            GCC_PREFIX=""
          fi
          "$GCC_PREFIX"strip $BINARY_NAME

          ########## create version file ##########
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "${{ github.event.inputs.version }}" > VERSION
          else
            echo "${GITHUB_REF/refs\/tags\//}" > VERSION
          fi

          ########## create tar.gz ##########

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_NAME=${{ matrix.binary-name }}-${{ github.event.inputs.version }}-${{ matrix.os-name }}-${{ matrix.architecture }}
          else
            RELEASE_NAME=${{ matrix.binary-name }}-${GITHUB_REF/refs\/tags\//}-${{ matrix.os-name }}-${{ matrix.architecture }}
          fi

          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME VERSION

          ########## create sha256 ##########

          if [[ ${{ runner.os }} == 'Windows' ]]; then

            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |

            target/${{ matrix.target }}/release/${{ matrix.binary-name }}-*.tar.gz
            target/${{ matrix.target }}/release/${{ matrix.binary-name }}-*.sha256

        env:

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish-cargo:
    name: Publishing to Cargo
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo publish
        env:

          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create-manifest:
    name: Create Release Manifest
    runs-on: ubuntu-latest
    needs: [create-release, publish]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download release assets
        run: |
          # Get release assets
          RELEASE_ID=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.create-release.outputs.version }} | jq -r '.id')
          
          # Create manifest
          echo '{"version": "${{ needs.create-release.outputs.version }}", "assets": [' > manifest.json
          
          # Get asset information
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets | jq -c '.[] | {name: .name, download_url: .browser_download_url, size: .size}')
          
          # Add assets to manifest
          FIRST=true
          while IFS= read -r asset; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo "," >> manifest.json
            fi
            echo -n "$asset" >> manifest.json
          done <<< "$ASSETS"
          
          echo ']}' >> manifest.json
          
      - name: Upload manifest
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: manifest.json

  test-installer:
    name: Test Installer Script
    runs-on: ${{ matrix.os }}
    needs: [create-release, publish, create-manifest]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Test installer
        run: |
          # Download and run installer
          curl -sSfL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | sh -s -- --version ${{ needs.create-release.outputs.version }}
          
          # Verify installation
          ~/.local/bin/query-crafter --version

